- noudatetaan testausstrategiaa, jotta ohjelmiston ja lähdekoodin laatua voidaan käytännössä valvoa

- testausstrategian lisäksi ohjelmistoa voidaan auditoida sisäisesti
    - ohjelmiston kehityksen edistyttyä tarpeeksi, voidaan myös pyytää ulkopuolista auditointia

- laadunvarmistamiseen liittyy olennaisesti myös ohjelmiston käyttäjätestaus
    - lisäksi käyttäjillä tulee olla mahdollisuus lähettää bug-reportteja sekä parannusehdotuksia
        palautteen muodossa

- koodin uudelleenkäytettävyys tulee myös pitää mahdollisimman korkeana
    - samoja komponentteja voidaan siis hyödyntää useassa eri osassa
    - koodin laatu korvaa määrän
    - turvaa myös sen, että ohjelmisto on yhteneväinen sen eri osissa

- ei-toiminnallisten vaatimusten mukainen laatu ja sen täyttö
    - esimerkiksi ohjelmiston saavutettavuus tulee pitää mahdollisimman korkeana
    - tässä voidaan turvautua paas-palveluntarjoajaan

- ohjelmiston pitää olla mahdollisimman helposti ylläpidettävä
    - liittyy myös paas-palvelun valintaan, sillä tämä helpottaa ylläpitämistä merkittävästi

- ohjelmiston opetteluun ja käyttämiseen vaadittava työmäärä tulee olla mahdollisimman pieni
    - tässä käyttäjätestaus ja palaute ovat myös melko suuressa roolissa

- kiinnitettävä myös erityistä huomiota ohjelmiston integriteettiin ja tietoturvaan
    - ulkopuolelta ei saa päästä sotkemaan ohjelmistoa tai esimerkiksi käyttäjien tietoihin

- ohjelmistotuotantosuunnitelmaa tulee ajoittain tarkastella ja tarvittaessa päivittää
    - mahdolliset muutokset tulee myös dokumentoida jollain tavalla, jotta muutoksia voidaan tarvittaessa
        jäljittää

- ci/cd pipeline käytössä
    - github actions lisäosineen


